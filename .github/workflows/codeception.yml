name: Codeception Tests

on: [push, pull_request]

jobs:

  ci:
    runs-on: ${{ matrix.operating-system }}

    strategy:
      matrix:
        operating-system: [ ubuntu-latest ]
        php-versions: [ '7.2' ]

    env:
      cache_version: 1 # increment to flush all caches
      PROJECT_ID: square1
      FORCE_SSL_LOGIN: false
      FORCE_SSL_ADMIN: false
      COMPOSE_INTERACTIVE_NO_CLI: 1

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Start global containers
        run: |
          sed --in-place='' 's/53:53/53/g' dev/docker/global/docker-compose.yml
          dev/docker/global/start.sh

      - name: Create placeholder .env
        run: |
          printf '
          WP_PLUGIN_ACF_KEY='${{ secrets.WP_PLUGIN_ACF_KEY }}'
          WP_PLUGIN_GF_KEY='${{ secrets.WP_PLUGIN_GF_KEY }}'
          WP_PLUGIN_GF_TOKEN='${{ secrets.WP_PLUGIN_GF_TOKEN }}'
          ' > .env

      - name: Create local config
        run: |
          php -r "file_exists( 'local-config.php' ) || copy( 'local-config-sample.php', 'local-config.php' );"
          php -r "file_exists( 'local-config.json' ) || copy( 'local-config-sample.json', 'local-config.json' );"
          php -r "file_exists( 'dev/tests/.env' ) || copy( 'dev/tests/.env-dist', 'dev/tests/.env' );"

      - name: Create composer config files
        run: |
          mkdir -p dev/docker/composer
          printf '{ "config": {}, "repositories": { "packagist": { "type": "composer", "url": "https://packagist.org" } } }' > dev/docker/composer/config.json
          printf '{ "github-oauth": { "github.com": "%s" } }\n' ${{ secrets.GH_TOKEN }} > dev/docker/composer/auth.json

      - name: Check for Cached Composer Dependencies
        id: cache-composer-dependencies
        uses: actions/cache@v1
        with:
          path: dev/docker/composer/cache
          key: ${{ runner.os }}-${{ env.cache_version }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-${{ env.cache_version }}-composer-

      - name: Start project containers
        run: |
          docker-compose --file=dev/docker/docker-compose.yml --project-name=${{ env.PROJECT_ID }} up -d --force-recreate
          docker-compose --file=dev/docker/docker-compose.yml --project-name=${{ env.PROJECT_ID }} exec php-fpm composer global require hirak/prestissimo --classmap-authoritative --update-no-dev
          docker-compose --file=dev/docker/docker-compose.yml --project-name=${{ env.PROJECT_ID }} exec php-fpm composer install --optimize-autoloader -d /application/www

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.13.1'

      - name: Get yarn cache directory
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ env.cache_version }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-${{ env.cache_version }}-node-

      - name: Install node modules
        run: yarn --frozen-lockfile

      - name: Build assets
        run: gulp dist

      - name: Run unit tests
        run: docker-compose --file=dev/docker/docker-compose.yml --project-name=${{ env.PROJECT_ID }} exec php-tests php /application/www/vendor/bin/codecept --config "/application/www/dev/tests" run unit

#      - name: Run integration tests
#        run: dev/docker/test.sh run integration

#      - name: Run acceptance tests
#        run: dev/docker/test.sh run acceptance

#      - name: Run webdriver tests
#        run: dev/docker/test.sh run webdriver
