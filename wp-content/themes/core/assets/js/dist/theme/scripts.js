/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/js/src/theme/index.js":
/*!***************************************************!*\
  !*** ./assets/js/src/theme/index.js + 32 modules ***!
  \***************************************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__, __webpack_require__.n, __webpack_require__.* */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/swiper/js/swiper.esm.js (<- Module is referenced from different chunks by these modules: ./assets/js/src/theme/index.js + 32 modules) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/delegate/src/delegate.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/lazysizes/lazysizes.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/lazysizes/plugins/bgset/ls.bgset.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/lazysizes/plugins/object-fit/ls.object-fit.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/lazysizes/plugins/parent-fit/ls.parent-fit.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/lazysizes/plugins/respimg/ls.respimg.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/lodash/assign.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/lodash/debounce.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/lodash/delay.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/lodash/forEach.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/lodash/get.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/lodash/uniqueId.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/spin.js/spin.js (<- Module is referenced from different chunks by these modules: ./assets/js/src/theme/index.js + 32 modules) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/verge/verge.js (<- Module is not an ECMAScript module) */
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/lodash/debounce.js\nvar debounce = __webpack_require__(\"./node_modules/lodash/debounce.js\");\nvar debounce_default = /*#__PURE__*/__webpack_require__.n(debounce);\n\n// EXTERNAL MODULE: ./node_modules/lodash/assign.js\nvar lodash_assign = __webpack_require__(\"./node_modules/lodash/assign.js\");\nvar assign_default = /*#__PURE__*/__webpack_require__.n(lodash_assign);\n\n// CONCATENATED MODULE: ./assets/js/src/utils/events.js\n\n\nvar on = function on(el, name, handler) {\n  if (el.addEventListener) {\n    el.addEventListener(name, handler);\n  } else {\n    el.attachEvent(\"on\".concat(name), function () {\n      handler.call(el);\n    });\n  }\n};\n\nvar ready = function ready(fn) {\n  if (document.readyState !== 'loading') {\n    fn();\n  } else if (document.addEventListener) {\n    document.addEventListener('DOMContentLoaded', fn);\n  } else {\n    document.attachEvent('onreadystatechange', function () {\n      if (document.readyState !== 'loading') {\n        fn();\n      }\n    });\n  }\n};\n\nvar trigger = function trigger(opts) {\n  var event;\n\n  var options = assign_default()({\n    data: {},\n    el: document,\n    event: '',\n    native: true\n  }, opts);\n\n  if (options.native) {\n    event = document.createEvent('HTMLEvents');\n    event.initEvent(options.event, true, false);\n  } else {\n    try {\n      event = new CustomEvent(options.event, {\n        detail: options.data\n      });\n    } catch (e) {\n      event = document.createEvent('CustomEvent');\n      event.initCustomEvent(options.event, true, true, options.data);\n    }\n  }\n\n  options.el.dispatchEvent(event);\n};\n\n\n// CONCATENATED MODULE: ./assets/js/src/theme/config/wp-settings.js\nvar wp = window.modern_tribe_config;\nvar IMAGES_URL = wp.images_url;\nvar TEMPLATE_URL = wp.template_url;\nvar HMR_DEV = wp.hmr_dev || 0;\nvar BLOCK_THEME_SERVICE_WORKER = wp.block_theme_service_worker || false;\nvar SCRIPT_DEBUG = wp.script_debug || 0;\n// CONCATENATED MODULE: ./assets/js/src/utils/tests.js\n\n/**\n * @module\n * @description Some handy test for common issues.\n */\n\nvar isJson = function isJson(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};\n\nvar canLocalStore = function canLocalStore() {\n  var mod;\n  var result = false;\n\n  try {\n    mod = new Date();\n    localStorage.setItem(mod, mod.toString());\n    result = localStorage.getItem(mod) === mod.toString();\n    localStorage.removeItem(mod);\n    return result;\n  } catch (_error) {\n    return result;\n  }\n};\n/**\n * @function supportsWorkers\n * @description Checks for both service worker support and indexedDb support, plus also checks if we want them loaded with a passed php constant messaged to js through our js config\n */\n\n\nvar supportsWorkers = function supportsWorkers() {\n  return 'serviceWorker' in navigator && 'indexedDB' in window && !BLOCK_THEME_SERVICE_WORKER;\n};\n\nvar android = /(android)/i.test(navigator.userAgent);\nvar chrome = !!window.chrome;\nvar firefox = typeof InstallTrigger !== 'undefined';\nvar ie =\n/* @cc_on!@ */\n false || document.documentMode || false;\nvar edge = !ie && !!window.StyleMedia;\nvar ios = !!navigator.userAgent.match(/(iPod|iPhone|iPad)/i);\nvar iosMobile = !!navigator.userAgent.match(/(iPod|iPhone)/i);\nvar opera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\nvar safari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0 || !chrome && !opera && window.webkitAudioContext !== 'undefined'; // eslint-disable-line\n\nvar os = navigator.platform;\n/**\n * do not change to arrow function until testing dependencies are updated beyond the following reported issue\n * https://github.com/facebook/jest/issues/5001\n */\n\nfunction browserTests() {\n  return {\n    android: android,\n    chrome: chrome,\n    edge: edge,\n    firefox: firefox,\n    ie: ie,\n    ios: ios,\n    iosMobile: iosMobile,\n    opera: opera,\n    safari: safari,\n    os: os\n  };\n}\n\n\n// CONCATENATED MODULE: ./assets/js/src/utils/dom/apply-browser-classes.js\n/**\n * @function browserClasses\n * @description sets up browser classes on body without using user agent strings where possible.\n */\n\n\nvar applyBrowserClasses = function applyBrowserClasses() {\n  var browser = browserTests();\n  var classes = document.body.classList;\n\n  if (browser.android) {\n    classes.add('device-android');\n  } else if (browser.ios) {\n    classes.add('device-ios');\n  }\n\n  if (browser.edge) {\n    classes.add('browser-edge');\n  } else if (browser.chrome) {\n    classes.add('browser-chrome');\n  } else if (browser.firefox) {\n    classes.add('browser-firefox');\n  } else if (browser.ie) {\n    classes.add('browser-ie');\n  } else if (browser.opera) {\n    classes.add('browser-opera');\n  } else if (browser.safari) {\n    classes.add('browser-safari');\n  }\n};\n\n/* harmony default export */ var apply_browser_classes = (applyBrowserClasses);\n// EXTERNAL MODULE: ./node_modules/verge/verge.js\nvar verge = __webpack_require__(\"./node_modules/verge/verge.js\");\nvar verge_default = /*#__PURE__*/__webpack_require__.n(verge);\n\n// CONCATENATED MODULE: ./assets/js/src/theme/config/state.js\n/* harmony default export */ var state = ({\n  desktop_initialized: false,\n  is_desktop: false,\n  is_mobile: false,\n  mobile_initialized: false,\n  v_height: 0,\n  v_width: 0\n});\n// CONCATENATED MODULE: ./assets/js/src/theme/config/options.js\n// breakpoint settings\nvar MOBILE_BREAKPOINT = 768;\n// CONCATENATED MODULE: ./assets/js/src/theme/core/viewport-dims.js\n/**\n * @module\n * @exports viewportDims\n * @description Sets viewport dimensions using verge on shared state\n * and detects mobile or desktop state.\n */\n\n\n\n\nvar viewportDims = function viewportDims() {\n  state.v_height = verge_default().viewportH();\n  state.v_width = verge_default().viewportW();\n\n  if (state.v_width >= MOBILE_BREAKPOINT) {\n    state.is_desktop = true;\n    state.is_mobile = false;\n  } else {\n    state.is_desktop = false;\n    state.is_mobile = true;\n  }\n};\n\n/* harmony default export */ var viewport_dims = (viewportDims);\n// CONCATENATED MODULE: ./assets/js/src/theme/core/resize.js\n/**\n * @module\n * @exports resize\n * @description Kicks in any third party plugins that operate on a sitewide basis.\n */\n\n\n\nvar resize = function resize() {\n  // code for resize events can go here\n  viewport_dims();\n  trigger({\n    event: 'modern_tribe/resize_executed',\n    native: false\n  });\n};\n\n/* harmony default export */ var core_resize = (resize);\n// EXTERNAL MODULE: ./node_modules/lazysizes/lazysizes.js\nvar lazysizes = __webpack_require__(\"./node_modules/lazysizes/lazysizes.js\");\n\n// EXTERNAL MODULE: ./node_modules/lazysizes/plugins/object-fit/ls.object-fit.js\nvar ls_object_fit = __webpack_require__(\"./node_modules/lazysizes/plugins/object-fit/ls.object-fit.js\");\n\n// EXTERNAL MODULE: ./node_modules/lazysizes/plugins/parent-fit/ls.parent-fit.js\nvar ls_parent_fit = __webpack_require__(\"./node_modules/lazysizes/plugins/parent-fit/ls.parent-fit.js\");\n\n// EXTERNAL MODULE: ./node_modules/lazysizes/plugins/respimg/ls.respimg.js\nvar ls_respimg = __webpack_require__(\"./node_modules/lazysizes/plugins/respimg/ls.respimg.js\");\n\n// EXTERNAL MODULE: ./node_modules/lazysizes/plugins/bgset/ls.bgset.js\nvar ls_bgset = __webpack_require__(\"./node_modules/lazysizes/plugins/bgset/ls.bgset.js\");\n\n// CONCATENATED MODULE: ./assets/js/src/theme/core/plugins.js\n/**\n * @module\n * @exports plugins\n * @description Kicks in any third party plugins that operate on\n * a sitewide basis.\n */\n// import gsap from 'gsap'; // uncomment to import gsap globally\n\n\n\n\n\n\nvar plugins = function plugins() {// initialize global external plugins here\n};\n\n/* harmony default export */ var core_plugins = (plugins);\n// EXTERNAL MODULE: ./node_modules/lodash/delay.js\nvar delay = __webpack_require__(\"./node_modules/lodash/delay.js\");\nvar delay_default = /*#__PURE__*/__webpack_require__.n(delay);\n\n// EXTERNAL MODULE: ./node_modules/delegate/src/delegate.js\nvar delegate = __webpack_require__(\"./node_modules/delegate/src/delegate.js\");\nvar delegate_default = /*#__PURE__*/__webpack_require__.n(delegate);\n\n// CONCATENATED MODULE: ./assets/js/src/utils/dom/accessibility.js\n/**\n * @function set_acc_active_attributes\n * @param {HTMLElement} target The domnode to modify.\n * @param {HTMLElement} content The domnode to modify.\n * @description Set the active aria attributes for accessibility on an accordion/toggle.\n */\nvar setAccActiveAttributes = function setAccActiveAttributes(target, content) {\n  target.setAttribute('aria-expanded', 'true');\n  target.setAttribute('aria-selected', 'true');\n  content.setAttribute('aria-hidden', 'false');\n};\n/**\n * @function set_acc_inactive_attributes\n * @param {HTMLElement} target The domnode to modify.\n * @param {HTMLElement} content The domnode to modify.\n * @description Set the inactive aria attributes for accessibility on an accordion/toggle.\n */\n\n\nvar setAccInactiveAttributes = function setAccInactiveAttributes(target, content) {\n  target.setAttribute('aria-expanded', 'false');\n  target.setAttribute('aria-selected', 'false');\n  content.setAttribute('aria-hidden', 'true');\n};\n\n\n// CONCATENATED MODULE: ./assets/js/src/utils/dom/scroll-to.js\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/**\n * @function scrollTo\n * @since 1.0\n * @desc scrollTo allows equalized or duration based scrolling of the body to a supplied $target with options.\n */\nvar scrollTo = function scrollTo(opts) {\n  var options = _extends({\n    auto: false,\n    auto_coefficent: 2.5,\n    afterScroll: function afterScroll() {},\n    duration: 1000,\n    easing: 'linear',\n    offset: 0,\n    $target: $()\n  }, opts);\n\n  var position;\n  var htmlPosition;\n\n  if (options.$target.length) {\n    position = options.$target.offset().top + options.offset;\n\n    if (options.auto) {\n      htmlPosition = $('html').scrollTop();\n\n      if (position > htmlPosition) {\n        options.duration = (position - htmlPosition) / options.auto_coefficent;\n      } else {\n        options.duration = (htmlPosition - position) / options.auto_coefficent;\n      }\n    }\n\n    $('html, body').animate({\n      scrollTop: position\n    }, options.duration, options.easing, options.after_scroll);\n  }\n};\n\n/* harmony default export */ var scroll_to = (scrollTo);\n// CONCATENATED MODULE: ./assets/js/src/utils/dom/get-hidden-height.js\n/**\n * @function getHiddenHeight\n * @since 1.0\n * @desc gets the height of hidden objects.\n */\nvar getHiddenHeight = function getHiddenHeight(el) {\n  var width = el.clientWidth;\n  var element = el;\n  element.style.visibility = 'hidden';\n  element.style.height = 'auto';\n  element.style.maxHeight = 'none';\n  element.style.position = 'fixed';\n  element.style.width = \"\".concat(width, \"px\");\n  var tHeight = element.offsetHeight;\n  element.style.visibility = '';\n  element.style.height = '';\n  element.style.maxHeight = '';\n  element.style.width = '';\n  element.style.position = '';\n  element.style.zIndex = '';\n  return tHeight;\n};\n\n/* harmony default export */ var get_hidden_height = (getHiddenHeight);\n// CONCATENATED MODULE: ./assets/js/src/utils/dom/slide.js\n\n\nvar options = {\n  timeoutDelay: 25\n};\nvar requestIds = [];\n/**\n * Interpolated piece-wise function for CSS ease function using cubic-bezier(0.25, 0.1, 0.25, 1)\n * At t = 0, easeFxn(t) = 0\n * At t = 1, easeFxn(t) = 1\n * If t < 0.2074, easeFxn(t) = -3.8716*t^3 + 6.1370*t^2 + 0.4*t\n * If t >= 0.2074, easeFxn(t) = 1.1317*(t-1)^3 - 0.1975*(t-1)^2 + 1\n * @param {Number} t Progress from 0 to 1\n */\n\nvar easeFxn = function easeFxn(t) {\n  return t < 0.2074 ? -3.8716 * t * t * t + 6.1370 * t * t + 0.4 * t : 1.1317 * (t - 1) * (t - 1) * (t - 1) - 0.1975 * (t - 1) * (t - 1) + 1;\n};\n/**\n * Check that request id exists, if not create an entry\n * @param {string} id Unique ID of animation\n */\n\n\nvar checkRequestIds = function checkRequestIds(id) {\n  if (!requestIds[id]) {\n    requestIds[id] = {\n      up: null,\n      down: null\n    };\n  }\n};\n/**\n * Cancel animations with request id\n * @param {string} id Unique ID of animation\n */\n\n\nvar cancelAnimations = function cancelAnimations(id) {\n  if (requestIds[id].up) {\n    window.cancelAnimationFrame(requestIds[id].up);\n    requestIds[id].up = null;\n  }\n\n  if (requestIds[id].down) {\n    window.cancelAnimationFrame(requestIds[id].down);\n    requestIds[id].down = null;\n  }\n};\n/**\n * Like jQuery's slideDown function\n * @param {Node} elem Element to show and hide\n * @param {string} id Unique ID of animation\n * @param {int} time Length of animation\n * @param {function} callback Callback function\n */\n\n\nvar down = function down(elem, id) {\n  var time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 400;\n  var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var startHeight = elem.offsetHeight;\n  var endHeight = get_hidden_height(elem);\n  var startTime = null;\n  elem.style.maxHeight = '0';\n  checkRequestIds(id);\n  cancelAnimations(id);\n\n  var step = function step(timestamp) {\n    if (!startTime) {\n      startTime = timestamp;\n    }\n\n    var timeDiff = timestamp - startTime;\n    var progress = easeFxn(timeDiff / time);\n    var height = progress * (endHeight - startHeight) + startHeight;\n    elem.style.maxHeight = \"\".concat(height, \"px\");\n\n    if (timeDiff < time) {\n      requestIds[id].down = window.requestAnimationFrame(step);\n    } else {\n      requestIds[id].down = null;\n      elem.style.maxHeight = 'none';\n\n      if (callback) {\n        callback();\n      }\n    }\n  };\n\n  delay_default()(function () {\n    requestIds[id].down = window.requestAnimationFrame(step);\n  }, options.timeoutDelay);\n};\n/**\n * Slide element up\n * @param {Node} elem Element to show and hide\n * @param {string} id Unique ID of animation\n * @param {int} time Length of animation\n * @param {function} callback Callback function\n */\n\nvar up = function up(elem, id) {\n  var time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 400;\n  var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var startHeight = elem.offsetHeight;\n  var endHeight = 0;\n  var startTime = null;\n  elem.style.maxHeight = \"\".concat(startHeight, \"px\");\n  checkRequestIds(id);\n  cancelAnimations(id);\n\n  var step = function step(timestamp) {\n    if (!startTime) {\n      startTime = timestamp;\n    }\n\n    var timeDiff = timestamp - startTime;\n    var progress = easeFxn(timeDiff / time);\n    var height = progress * (endHeight - startHeight) + startHeight;\n    elem.style.maxHeight = \"\".concat(height, \"px\");\n\n    if (timeDiff < time) {\n      requestIds[id].up = window.requestAnimationFrame(step);\n    } else {\n      requestIds[id].up = null;\n      elem.style.maxHeight = '0';\n\n      if (callback) {\n        callback();\n      }\n    }\n  };\n\n  delay_default()(function () {\n    requestIds[id].up = window.requestAnimationFrame(step);\n  }, options.timeoutDelay);\n};\n// CONCATENATED MODULE: ./assets/js/src/utils/tools.js\n/**\n * @module\n * @description Some vanilla js cross browser utils\n */\n\n/**\n * Add a class to a dom element or exit safely if not set\n *\n * @param el Node\n * @param className Class string\n * @returns {*} Node or false\n */\nvar addClass = function addClass(el) {\n  var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var element = el;\n\n  if (!element) {\n    return false;\n  }\n\n  element.classList.add(className);\n  return element;\n};\n/**\n *\n * Get immediate child nodes and return an array of them\n *\n * @param el\n * @returns {Array} Iterable array of dom nodes\n */\n\nvar getChildren = function getChildren(el) {\n  var children = [];\n  var i = el.children.length;\n\n  for (i; i--;) {\n    // eslint-disable-line\n    if (el.children[i].nodeType !== 8) {\n      children.unshift(el.children[i]);\n    }\n  }\n\n  return children;\n};\n/**\n *\n * Test if a dom node has a class or returns false if el not defined\n *\n * @param el\n * @param className\n * @returns {boolean}\n */\n\nvar hasClass = function hasClass(el) {\n  var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  if (!el) {\n    return false;\n  }\n\n  return el.classList.contains(className);\n};\n/**\n * Removes a class from the dom node\n *\n * @param el\n * @param className\n * @returns {*} returns false or el if passed\n */\n\nvar removeClass = function removeClass(el, className) {\n  var element = el;\n\n  if (!element) {\n    return false;\n  }\n\n  element.classList.remove(className);\n  return element;\n};\n/**\n * Remove a class from an element that contains a string\n *\n * @param el\n * @param string\n */\n\nvar removeClassThatContains = function removeClassThatContains(el) {\n  var string = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  for (var i = 0; i < el.classList.length; i++) {\n    if (el.classList.item(i).indexOf(string) !== -1) {\n      el.classList.remove(el.classList.item(i));\n    }\n  }\n};\n/**\n * Compares an els classList against an array of strings to see if any match\n *\n * @param el the element to check against\n * @param arr The array of classes as strings to test against\n * @param prefix optional prefix string applied to all test strings\n * @param suffix optional suffix string\n */\n\nvar hasClassFromArray = function hasClassFromArray(el) {\n  var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var suffix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  return arr.some(function (c) {\n    return el.classList.contains(\"\".concat(prefix).concat(c).concat(suffix));\n  });\n};\n/**\n * Highly efficient function to convert a nodelist into a standard array. Allows you to run Array.forEach\n *\n * @param {Element|NodeList} elements to convert\n * @returns {Array} Of converted elements\n */\n\nvar convertElements = function convertElements() {\n  var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var converted = [];\n  var i = elements.length;\n\n  for (i; i--; converted.unshift(elements[i])) {\n    ;\n  } // eslint-disable-line\n\n\n  return converted;\n};\n/**\n * Should be used at all times for getting nodes throughout our app. Please use the data-js attribute whenever possible\n *\n * @param selector The selector string to search for. If arg 4 is false (default) then we search for [data-js=\"selector\"]\n * @param convert Convert the NodeList to an array? Then we can Array.forEach directly. Uses convertElements from above\n * @param node Parent node to search from. Defaults to document\n * @param custom Is this a custom selector where we don't want to use the data-js attribute?\n * @returns {NodeList}\n */\n\nvar getNodes = function getNodes() {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var convert = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var node = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;\n  var custom = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var selectorString = custom ? selector : \"[data-js=\\\"\".concat(selector, \"\\\"]\");\n  var nodes = node.querySelectorAll(selectorString);\n\n  if (convert) {\n    nodes = convertElements(nodes);\n  }\n\n  return nodes;\n};\n/**\n * Gets the closest ancestor that matches a selector string\n *\n * @param el\n * @param selector\n * @returns {*}\n */\n\nvar closest = function closest(el, selector) {\n  var matchesFn;\n  var parent;\n  ['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector'].some(function (fn) {\n    if (typeof document.body[fn] === 'function') {\n      matchesFn = fn;\n      return true;\n    }\n    /* istanbul ignore next */\n\n\n    return false;\n  });\n\n  while (el) {\n    parent = el.parentElement;\n\n    if (parent && parent[matchesFn](selector)) {\n      return parent;\n    }\n\n    el = parent; // eslint-disable-line\n  }\n\n  return null;\n};\n/**\n * Insert a node after another node\n *\n * @param newNode {Element|NodeList}\n * @param referenceNode {Element|NodeList}\n */\n\nvar insertAfter = function insertAfter(newNode, referenceNode) {\n  referenceNode.parentNode.insertBefore(newNode, referenceNode.nextElementSibling);\n};\n/**\n * Insert a node before another node\n *\n * @param newNode {Element|NodeList}\n * @param referenceNode {Element|NodeList}\n */\n\nvar insertBefore = function insertBefore(newNode, referenceNode) {\n  referenceNode.parentNode.insertBefore(newNode, referenceNode);\n};\n// CONCATENATED MODULE: ./components/accordion/js/accordion.js\n\n\n\n\n\n\n\nvar siteWrap = getNodes('site-wrap')[0];\nvar pn = document.getElementById('panel-navigation');\nvar accordion_options = {\n  speed: 300\n};\n/**\n * @function closeOthers\n * @param {HTMLElement} row The domnode to map from.\n * @description Close the other accordion toggles.\n */\n\nvar closeOthers = function closeOthers(row) {\n  getNodes('.active .c-accordion__content', true, row.parentNode, true).forEach(function (accordion) {\n    return up(accordion, accordion.id, accordion_options.speed);\n  });\n  getNodes('.active', true, row.parentNode, true).forEach(function (childRow) {\n    var header = childRow.querySelector('.c-accordion__header');\n    var content = childRow.querySelector('.c-accordion__content');\n    removeClass(childRow, 'active');\n    setAccInactiveAttributes(header, content);\n\n    delay_default()(function () {\n      content.setAttribute('hidden', 'true');\n    }, accordion_options.speed);\n  });\n};\n/**\n * @function setOffset\n * @description We have to account for scroll offset due to admin bar and maybe a fixed panel nav when scrolling\n */\n\n\nvar setOffset = function setOffset() {\n  accordion_options.offset = -20;\n\n  if (hasClass(document.body, 'admin-bar')) {\n    accordion_options.offset = -20 - 40;\n  }\n\n  if (pn) {\n    accordion_options.offset = -10 - pn.offsetHeight;\n  }\n};\n/**\n * @function openAccordion\n * @description Toggle the accordion open\n */\n\n\nvar openAccordion = function openAccordion(header, content) {\n  var row = closest(header, '.c-accordion__row');\n  closeOthers(row);\n  addClass(row, 'active');\n  setAccActiveAttributes(header, content);\n  content.removeAttribute('hidden');\n  setOffset();\n  down(content, content.id, accordion_options.speed);\n\n  delay_default()(function () {\n    scroll_to({\n      after_scroll: function after_scroll() {\n        trigger({\n          event: 'modern_tribe/accordion_animated',\n          native: false\n        });\n      },\n      offset: accordion_options.offset,\n      duration: 300,\n      $target: $(row)\n    });\n  }, accordion_options.speed);\n};\n/**\n * @function closeAccordion\n * @description Toggle the accordion closed\n */\n\n\nvar closeAccordion = function closeAccordion(header, content) {\n  var row = closest(header, '.c-accordion__row');\n  removeClass(row, 'active');\n  setAccInactiveAttributes(header, content);\n  up(content, content.id, accordion_options.speed);\n\n  delay_default()(function () {\n    content.setAttribute('hidden', 'true');\n    trigger({\n      event: 'modern_tribe/accordion_animated',\n      native: false\n    });\n  }, accordion_options.speed);\n};\n/**\n * @function handlePanelEvents\n * @description\n */\n\n\nvar handlePanelEvents = function handlePanelEvents(e) {\n  var panel = document.querySelectorAll('.site-panel--accordion[class*=\"collection-preview__active\"]')[0];\n\n  if (!panel) {\n    return;\n  }\n\n  var header = getNodes(\".c-accordion__header[data-index=\\\"\".concat(e.detail.rowIndex, \"\\\"]\"), false, panel, true)[0];\n  var row = closest(header, '.c-accordion__row');\n  closeOthers(row);\n  openAccordion(header, header.nextElementSibling);\n};\n/**\n * @function toggleItem\n * @param {object} e The js event object.\n * @description Toggle the active accordion item using class methods.\n */\n\n\nvar toggleItem = function toggleItem(e) {\n  var header = e.delegateTarget;\n  var row = closest(header, '.c-accordion__row');\n  var content = row.querySelector('.c-accordion__content');\n\n  if (hasClass(row, 'active')) {\n    closeAccordion(header, content);\n  } else {\n    openAccordion(header, content);\n  }\n};\n/**\n * @function bindEvents\n * @description Bind the events for this module here.\n */\n\n\nvar bindEvents = function bindEvents() {\n  delegate_default()(siteWrap, '.c-accordion__header', 'click', toggleItem);\n  document.addEventListener('modular_content/repeater_row_activated', handlePanelEvents);\n  document.addEventListener('modular_content/repeater_row_added', handlePanelEvents);\n};\n/**\n * @function init\n * @description Initializes the class if the element(s) to work on are found.\n */\n\n\nvar init = function init() {\n  setOffset();\n  bindEvents();\n  console.info('SquareOne Theme: Initialized accordion component scripts.');\n};\n\n/* harmony default export */ var accordion = (init);\n// CONCATENATED MODULE: ./components/accordion/index.js\n/* -----------------------------------------------------------------------------\n *\n * Component: Accordion\n *\n * This file is just a clearing-house, see the css directory\n * and edit the source files found there.\n *\n * ----------------------------------------------------------------------------- */\n\n\nvar accordion_init = function init() {\n  accordion();\n};\n\n/* harmony default export */ var components_accordion = (accordion_init);\n// CONCATENATED MODULE: ./components/comments/js/comments.js\n/* -----------------------------------------------------------------------------\n *\n * Component: Comments\n *\n * ----------------------------------------------------------------------------- */\n\n/**\n * @module\n * @description Javascript that handles WordPress comment form.\n */\n\n\nvar el = {\n  container: getNodes('comment-form')[0]\n};\n/**\n * @function validateCommentSubmit\n * @description Simple comment form validation.\n */\n\nvar validateCommentSubmit = function validateCommentSubmit(e) {\n  var inputs = convertElements(el.container.querySelectorAll('textarea, input[name=\"author\"], input[name=\"email\"]'));\n\n  if (!inputs.length) {\n    return;\n  }\n\n  inputs.forEach(function (input) {\n    var valueCheck = input.value ? input.value.trim() : '';\n\n    if (valueCheck.length === 0) {\n      e.preventDefault();\n    }\n  });\n};\n/**\n * @function bindEvents\n * @description Bind the events for this module here.\n */\n\n\nvar comments_bindEvents = function bindEvents() {\n  delegate_default()(el.container, 'input[type=\"submit\"]', 'click', validateCommentSubmit);\n};\n/**\n * @function init\n * @description Initializes the class if the element(s) to work on are found.\n */\n\n\nvar comments_init = function init() {\n  if (!el.container) {\n    return;\n  }\n\n  comments_bindEvents();\n  console.info('SquareOne Theme: Initialized comment form script.');\n};\n\n/* harmony default export */ var comments = (comments_init);\n// CONCATENATED MODULE: ./components/comments/index.js\n/* -----------------------------------------------------------------------------\n *\n * Component: Comments\n *\n * This file is just a clearing-house, see the css directory\n * and edit the source files found there.\n *\n * ----------------------------------------------------------------------------- */\n\n\nvar components_comments_init = function init() {\n  comments();\n};\n\n/* harmony default export */ var components_comments = (components_comments_init);\n// EXTERNAL MODULE: ./node_modules/lodash/forEach.js\nvar forEach = __webpack_require__(\"./node_modules/lodash/forEach.js\");\nvar forEach_default = /*#__PURE__*/__webpack_require__.n(forEach);\n\n// CONCATENATED MODULE: ./assets/js/src/utils/dom/popup.js\n\n\nfunction popup_extends() { popup_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return popup_extends.apply(this, arguments); }\n\nvar popup = function popup(opts) {\n  var options = popup_extends({\n    event: null,\n    url: '',\n    center: true,\n    name: '_blank',\n    specs: {\n      menubar: 0,\n      scrollbars: 0,\n      status: 1,\n      titlebar: 1,\n      toolbar: 0,\n      top: 100,\n      left: 100,\n      width: 500,\n      height: 300\n    }\n  }, opts);\n\n  if (options.event) {\n    options.event.preventDefault();\n\n    if (!options.url.length) {\n      options.url = options.event.currentTarget.href;\n    }\n  }\n\n  if (options.url.length) {\n    if (options.center) {\n      options.specs.top = screen.height / 2 - options.specs.height / 2;\n      options.specs.left = screen.width / 2 - options.specs.width / 2;\n    }\n\n    var specs = [];\n\n    forEach_default()(options.specs, function (val, key) {\n      var spec = \"\".concat(key, \"=\").concat(val);\n      specs.push(spec);\n    });\n\n    window.open(options.url, options.name, specs.join());\n  }\n};\n\n/* harmony default export */ var dom_popup = (popup);\n// CONCATENATED MODULE: ./components/share/js/share.js\n/* -----------------------------------------------------------------------------\n *\n * Component: Social Share\n *\n * ----------------------------------------------------------------------------- */\n\n/**\n * @module\n * @description JavaScript specific to the social sharing of content.\n */\n\n\n\nvar share_el = {\n  container: getNodes('social-share-networks')[0]\n};\n/**\n * @function launchSocialPopup\n * @description Init social share popups.\n */\n\nvar launchSocialPopup = function launchSocialPopup(e) {\n  dom_popup({\n    event: e,\n    url: e.delegateTarget.href,\n    specs: {\n      width: parseInt(e.delegateTarget.getAttribute('data-width'), 10),\n      height: parseInt(e.delegateTarget.getAttribute('data-height'), 10)\n    }\n  });\n};\n/**\n * @function bindEvents\n * @description Bind the events for this module.\n */\n\n\nvar share_bindEvents = function bindEvents() {\n  delegate_default()(share_el.container, '[data-js=\"social-share-popup\"]', 'click', launchSocialPopup);\n};\n/**\n * @function init\n * @description Kick off this modules functions\n */\n\n\nvar socialShare = function socialShare() {\n  if (!share_el.container) {\n    return;\n  }\n\n  share_bindEvents();\n  console.info('SquareOne Theme: Initialized global social content sharing scripts.');\n};\n\n/* harmony default export */ var share = (socialShare);\n// CONCATENATED MODULE: ./components/share/index.js\n/* -----------------------------------------------------------------------------\n *\n * Component: Social Share\n *\n * This file is just a clearing-house, see the css directory\n * and edit the source files found there.\n *\n * ----------------------------------------------------------------------------- */\n\n\nvar share_init = function init() {\n  share();\n};\n\n/* harmony default export */ var components_share = (share_init);\n// EXTERNAL MODULE: ./node_modules/lodash/get.js\nvar get = __webpack_require__(\"./node_modules/lodash/get.js\");\nvar get_default = /*#__PURE__*/__webpack_require__.n(get);\n\n// EXTERNAL MODULE: ./node_modules/lodash/uniqueId.js\nvar uniqueId = __webpack_require__(\"./node_modules/lodash/uniqueId.js\");\nvar uniqueId_default = /*#__PURE__*/__webpack_require__.n(uniqueId);\n\n// EXTERNAL MODULE: ./node_modules/swiper/js/swiper.esm.js + 2 modules\nvar swiper_esm = __webpack_require__(\"./node_modules/swiper/js/swiper.esm.js\");\n\n// CONCATENATED MODULE: ./components/slider/js/slider.js\n\n\n\n\nfunction slider_extends() { slider_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return slider_extends.apply(this, arguments); }\n\n\n\n\nswiper_esm.Swiper.use([swiper_esm.Navigation, swiper_esm.Pagination, swiper_esm.A11y, swiper_esm.Autoplay]);\nvar instances = {\n  swipers: {}\n};\nvar slider_options = {\n  swiperMain: function swiperMain() {\n    return {\n      a11y: true\n    };\n  },\n  swiperThumbs: function swiperThumbs() {\n    return {\n      a11y: true,\n      slidesPerView: 'auto',\n      touchRatio: 0.2,\n      watchSlidesVisibility: true,\n      watchSlidesProgress: true\n    };\n  }\n};\n/**\n * @module\n * @description Update Pagination.\n */\n\nvar updatePagination = function updatePagination(slider, swiperId) {\n  var pagination = getNodes('c-slider-pagination', false, slider)[0];\n\n  if (!pagination) {\n    return;\n  }\n\n  pagination.setAttribute('data-id', swiperId);\n};\n/**\n * @function updateCarousel\n * @description Update carousel\n */\n\n\nvar updateCarousel = function updateCarousel(carousel, swiperId, swiperThumbId) {\n  carousel.classList.add('initialized');\n  carousel.setAttribute('data-id', swiperThumbId);\n  carousel.setAttribute('data-controls', swiperId);\n};\n/**\n * @function getMainOptsForCarousel\n * @description Get the main variable options for the carousel\n */\n\n\nvar getMainOptsForCarousel = function getMainOptsForCarousel(carousel) {\n  var opts = slider_options.swiperThumbs();\n\n  if (carousel.dataset.swiperOptions && isJson(carousel.dataset.swiperOptions)) {\n    slider_extends(opts, JSON.parse(carousel.dataset.swiperOptions));\n  }\n\n  return opts;\n};\n/**\n * @function getMainOptsForSlider\n * @description Get the main variable options for the slider\n */\n\n\nvar getMainOptsForSlider = function getMainOptsForSlider(slider, swiperId) {\n  var opts = slider_options.swiperMain();\n\n  if (slider.classList.contains('c-slider__main--has-arrows')) {\n    opts.navigation = {};\n    opts.navigation.nextEl = '.c-slider__button--next';\n    opts.navigation.prevEl = '.c-slider__button--prev';\n  }\n\n  if (slider.classList.contains('c-slider__main--has-pagination')) {\n    opts.pagination = {};\n    opts.pagination.el = \".c-slider__pagination[data-id=\\\"\".concat(swiperId, \"\\\"]\");\n    opts.pagination.clickable = true;\n    updatePagination(slider, swiperId);\n  }\n\n  if (slider.classList.contains('c-slider__main--has-carousel')) {\n    var carousel = slider.nextElementSibling;\n\n    if (carousel) {\n      var swiperThumbId = uniqueId_default()('swiper-carousel-');\n\n      instances.swipers[swiperThumbId] = new swiper_esm.Swiper(carousel, getMainOptsForCarousel(carousel));\n      opts.thumbs = {};\n      opts.thumbs.swiper = instances.swipers[swiperThumbId];\n      updateCarousel(carousel, swiperId, swiperThumbId);\n    }\n  }\n\n  if (slider.dataset.swiperOptions && isJson(slider.dataset.swiperOptions)) {\n    slider_extends(opts, JSON.parse(slider.dataset.swiperOptions));\n  }\n\n  return opts;\n};\n/**\n * @module\n * @description Focus row from index and row index\n */\n\n\nvar focusRow = function focusRow(index, rowIndex, jumpTo) {\n  var sliderSelector = \"[data-js=\\\"panel\\\"][data-index=\\\"\".concat(index, \"\\\"] [data-js=\\\"c-slider\\\"]\");\n  var slider = getNodes(sliderSelector, false, document, true)[0];\n\n  if (slider && slider.swiper) {\n    var newSpeed = slider.swiper.params.speed;\n\n    if (jumpTo) {\n      newSpeed = 0;\n    }\n\n    slider.swiper.slideTo(rowIndex, newSpeed);\n  }\n};\n/**\n * @module\n * @description Swiper init.\n */\n\n\nvar initSliders = function initSliders() {\n  getNodes('[data-js=\"c-slider\"]:not(.initialized)', true, document, true).forEach(function (slider) {\n    var swiperMainId = uniqueId_default()('swiper-');\n\n    slider.classList.add('initialized');\n    instances.swipers[swiperMainId] = new swiper_esm.Swiper(slider, getMainOptsForSlider(slider, swiperMainId));\n    slider.setAttribute('data-id', swiperMainId);\n  });\n};\n/**\n * @module\n * @description Responds to panel live updating.\n */\n\n\nvar previewChangeHandler = function previewChangeHandler(e) {\n  if (e.type === 'modular_content/panel_preview_updated') {\n    initSliders();\n  }\n\n  delay_default()(function () {\n    // for cases when all we have is the parent (example: when updating CTAs)\n    var data = get_default()(e, 'detail.parent.data', {});\n\n    if (typeof data.index !== 'undefined' && typeof data.childIndex !== 'undefined') {\n      focusRow(data.index, data.childIndex, true);\n    } else if (typeof e.detail.index !== 'undefined' && typeof e.detail.rowIndex !== 'undefined') {\n      if (e.type === 'modular_content/repeater_row_deactivated') {\n        focusRow(e.detail.index, 0);\n      } else {\n        focusRow(e.detail.index, e.detail.rowIndex);\n      }\n    }\n  }, 50);\n};\n/**\n * @module\n * @description Bind Events.\n */\n\n\nvar slider_bindEvents = function bindEvents() {\n  document.addEventListener('modular_content/panel_preview_updated', previewChangeHandler);\n  document.addEventListener('modular_content/repeater_row_activated', previewChangeHandler);\n  document.addEventListener('modular_content/repeater_row_deactivated', previewChangeHandler);\n  document.addEventListener('modular_content/repeater_row_added', previewChangeHandler);\n};\n\nvar slider_init = function init() {\n  if (!swiper_esm.Swiper) {\n    return;\n  }\n\n  initSliders();\n  slider_bindEvents();\n  console.info('SquareOne Theme: Initialized slider component scripts.');\n};\n\n/* harmony default export */ var slider = (slider_init);\n// CONCATENATED MODULE: ./components/slider/index.js\n/* -----------------------------------------------------------------------------\n *\n * Component: Slider\n *\n * This file is just a clearing-house, see the js directory\n * and edit the source files found there.\n *\n * ----------------------------------------------------------------------------- */\n\n\nvar components_slider_init = function init() {\n  slider();\n};\n\n/* harmony default export */ var components_slider = (components_slider_init);\n// CONCATENATED MODULE: ./components/tabs/js/tabs.js\n/**\n * @module\n * @description Javascript that drives the sitewide tabs widget.\n */\n\n\nvar tabs_siteWrap = getNodes('site-wrap')[0];\nvar tabs = getNodes('c-tabs');\n/**\n * @function resetCurrent\n * @param {HTMLElement} button Button clicked.\n * @description Resets the current button and content to inactive state\n */\n\nvar resetCurrent = function resetCurrent(button) {\n  var container = closest(button, '[data-js=\"c-tabs\"]');\n  var activeBtnClass = container.getAttribute('data-button-active-class');\n  var activeContentClass = container.getAttribute('data-content-active-class');\n  var currentActiveButton = getNodes(\".\".concat(activeBtnClass), false, container, true)[0];\n  var currentActiveContent = getNodes(\".\".concat(activeContentClass), false, container, true)[0];\n\n  if (!currentActiveButton || !currentActiveContent) {\n    return;\n  }\n\n  removeClass(currentActiveButton, activeBtnClass);\n  removeClass(currentActiveContent, activeContentClass);\n  currentActiveButton.setAttribute('aria-selected', 'false');\n  currentActiveContent.setAttribute('aria-hidden', 'true');\n};\n/**\n * @function setNewCurrent\n * @param {HTMLElement} button Button clicked.\n * @description Set tab button and related content to active state\n */\n\n\nvar setNewCurrent = function setNewCurrent(button) {\n  var container = closest(button, '[data-js=\"c-tabs\"]');\n  var activeBtnClass = container.getAttribute('data-button-active-class');\n  var activeContentClass = container.getAttribute('data-content-active-class');\n  var nxtContentId = button.getAttribute('aria-controls');\n  var nextActiveContent = getNodes(\".c-tab__content[id=\\\"\".concat(nxtContentId, \"\\\"]\"), false, container, true)[0];\n\n  if (!nextActiveContent) {\n    return;\n  }\n\n  button.setAttribute('aria-selected', 'true');\n  addClass(button, activeBtnClass);\n  nextActiveContent.setAttribute('aria-hidden', 'false');\n  addClass(nextActiveContent, activeContentClass);\n};\n/**\n * @function tabClick\n * @param {object} e The js event object.\n * @description Toggle the active tab item using class methods.\n */\n\n\nvar tabClick = function tabClick(e) {\n  var button = e.delegateTarget;\n  resetCurrent(button);\n  setNewCurrent(button);\n};\n/**\n * @function focusRow\n * @description Focus row from index and row index\n */\n\n\nvar tabs_focusRow = function focusRow(index, rowIndex) {\n  var buttonSelector = \"[data-js=\\\"panel\\\"][data-index=\\\"\".concat(index, \"\\\"] [data-js=\\\"c-tab__button\\\"][data-row-index=\\\"\").concat(rowIndex, \"\\\"]\");\n  var activeButton = getNodes(buttonSelector, false, tabs_siteWrap, true)[0];\n\n  if (activeButton) {\n    resetCurrent(activeButton);\n    setNewCurrent(activeButton);\n  }\n};\n/**\n * @function repeaterChangeHandler\n * @description Responds to panel live updating.\n */\n\n\nvar repeaterChangeHandler = function repeaterChangeHandler(e) {\n  tabs_focusRow(e.detail.index, e.detail.rowIndex);\n};\n/**\n * @function bindEvents\n * @description Bind the events for this module here.\n */\n\n\nvar tabs_bindEvents = function bindEvents() {\n  delegate_default()(tabs_siteWrap, '.c-tab__button', 'click', tabClick);\n  document.addEventListener('modular_content/repeater_row_activated', repeaterChangeHandler);\n  document.addEventListener('modular_content/repeater_row_added', repeaterChangeHandler);\n};\n/**\n * @function init\n * @description Initializes the class if the element(s) to work on are found.\n */\n\n\nvar tabs_init = function init() {\n  if (!tabs) {\n    return;\n  }\n\n  tabs_bindEvents();\n  console.info('SquareOne Theme: Initialized tabs component scripts.');\n};\n\n/* harmony default export */ var js_tabs = (tabs_init);\n// CONCATENATED MODULE: ./components/tabs/index.js\n/* -----------------------------------------------------------------------------\n *\n * Component: Tabs\n *\n * This file is just a clearing-house, see the css directory\n * and edit the source files found there.\n *\n * ----------------------------------------------------------------------------- */\n\n\nvar components_tabs_init = function init() {\n  js_tabs();\n};\n\n/* harmony default export */ var components_tabs = (components_tabs_init);\n// CONCATENATED MODULE: ./components/video/js/video.js\n\n\n\n\nvar video_el = {\n  container: getNodes('site-wrap')[0],\n  embeds: []\n};\n/**\n * @function removeErrantPTags\n * @description Remove and clean up errant p tags added by WP auto P.\n */\n\nvar removeErrantPTags = function removeErrantPTags(embed) {\n  var pStray = getNodes('p', true, embed, true);\n\n  if (pStray.length) {\n    pStray.forEach(function (node) {\n      node.parentNode.removeChild(node);\n    });\n  }\n};\n/**\n * @function setupOembeds\n * @description Setup oembeds.\n */\n\n\nvar setupOembeds = function setupOembeds() {\n  video_el.embeds.forEach(function (embed) {\n    // Remove errant WP induced P tag\n    removeErrantPTags(embed); // Set display mode of embeds for small vs. regular\n\n    if (embed.offsetWidth >= 500) {\n      embed.classList.remove('c-video--is-small');\n    } else {\n      embed.classList.add('c-video--is-small');\n    }\n  });\n};\n/**\n * @function resetEmbed\n * @description Reset embed.\n */\n\n\nvar resetEmbed = function resetEmbed() {\n  var embed = document.getElementsByClassName('c-video--is-playing')[0];\n\n  if (!embed) {\n    return;\n  }\n\n  var trigger = embed.querySelector('.c-video__trigger');\n  var iframe = embed.querySelector('iframe');\n\n  if (!iframe || !trigger) {\n    return;\n  } // Remove embed\n\n\n  embed.removeChild(iframe);\n  embed.classList.remove('c-video--is-playing'); // Fade in image/caption\n\n  trigger.classList.remove('u-hidden');\n};\n/**\n * @function playEmbed\n * @description Play embed.\n */\n\n\nvar playEmbed = function playEmbed(e) {\n  e.preventDefault(); // Reset embed if another is playing\n\n  if (document.getElementsByClassName('c-video--is-playing').length) {\n    resetEmbed();\n  }\n\n  var target = e.delegateTarget;\n  var parent = closest(target, '.c-video');\n  var videoId = parent.getAttribute('data-embed-id');\n  var iframeUrl = parent.getAttribute('data-embed-provider') === 'YouTube' ? \"https://www.youtube.com/embed/\".concat(videoId, \"?autoplay=1&autohide=1&fs=1&modestbranding=1&showinfo=0&controls=2&autoplay=1&rel=0&theme=light&vq=hd720\") : \"//player.vimeo.com/video/\".concat(videoId, \"?autoplay=1\");\n  var iframe = document.createElement('iframe');\n  iframe.id = videoId;\n  iframe.frameBorder = 0;\n  iframe.src = iframeUrl;\n  iframe.width = 1280;\n  iframe.height = 720;\n  iframe.tabIndex = 0;\n  iframe.allow = 'autoplay; fullscreen';\n  iframe.title = parent.getAttribute('data-embed-title'); // Add & kickoff embed\n\n  parent.classList.add('c-video--is-playing');\n  insertBefore(iframe, target);\n  iframe.focus(); // Fade out image/caption, avoid fouc\n\n  delay_default()(function () {\n    target.classList.add('u-hidden');\n  }, 250);\n};\n/**\n * @function executeResize\n * @description Bind the events for this module that react to resize events here.\n */\n\n\nvar executeResize = function executeResize() {\n  setupOembeds();\n};\n/**\n * @function cacheElements\n * @description Caches dom nodes this module uses.\n */\n\n\nvar cacheElements = function cacheElements() {\n  if (!video_el.embeds) {\n    return;\n  }\n\n  video_el.embeds = getNodes('c-video', true, video_el.container);\n};\n/**\n * @function bindEvents\n * @description Bind the events for this module here.\n */\n\n\nvar video_bindEvents = function bindEvents() {\n  delegate_default()(video_el.container, '[data-js=\"c-video-trigger\"]', 'click', playEmbed);\n  on(document, 'modern_tribe/resize_executed', executeResize);\n};\n/**\n * @function init\n * @description Kick off this modules functions\n */\n\n\nvar videoEmbeds = function videoEmbeds() {\n  if (!video_el.container) {\n    return;\n  }\n\n  cacheElements();\n\n  if (!video_el.embeds.length) {\n    return;\n  }\n\n  video_bindEvents();\n  setupOembeds();\n  console.info('SquareOne Theme: Initialized video embeds scripts.');\n};\n\n/* harmony default export */ var video = (videoEmbeds);\n// CONCATENATED MODULE: ./components/video/index.js\n/* -----------------------------------------------------------------------------\n *\n * Component: Video\n *\n * This file is just a clearing-house, see the css directory\n * and edit the source files found there.\n *\n * ----------------------------------------------------------------------------- */\n\n\nvar video_init = function init() {\n  video();\n};\n\n/* harmony default export */ var components_video = (video_init);\n// CONCATENATED MODULE: ./assets/js/src/theme/core/components.js\n/**\n * @module\n * @exports init\n * @description Initializes all components found in the components directory of the theme\n */\n\n\n\n\n\n\n\nvar components_init = function init() {\n  components_accordion();\n  components_comments();\n  components_share();\n  components_slider();\n  components_tabs();\n  components_video();\n  console.info('SquareOne Theme: Initialized all components.');\n};\n\n/* harmony default export */ var components = (components_init);\n// EXTERNAL MODULE: ./node_modules/spin.js/spin.js\nvar spin = __webpack_require__(\"./node_modules/spin.js/spin.js\");\n\n// CONCATENATED MODULE: ./integrations/gravity-forms/js/gravity-forms.js\n/**\n * @module\n * @description JavaScript specific to forms, specifically Gravity Forms.\n */\n\n\n\n\nvar gravity_forms_el = {\n  container: getNodes('site-wrap')[0]\n};\nvar spinner;\nvar submitting = false;\n/**\n * @function scrollSubmit\n * @description Adjusts gravity form submit top placement.\n */\n\nvar scrollSubmit = function scrollSubmit(form) {\n  scroll_to({\n    duration: 500,\n    offset: -60,\n    $target: window.$(form)\n  });\n};\n/**\n * @function gravityFormSubmit\n * @description We only want post_render doing its thing if a submit is in play.\n * This takes care of that.\n */\n\n\nvar gravityFormSubmit = function gravityFormSubmit() {\n  submitting = true;\n};\n/**\n * @function gravityFormPostRender\n * @description executes every time the form is rendered including initial form load,\n * next/previous page for multi-page forms, form rendered with validation errors,\n * confirmation message displayed, etc.\n */\n\n\nvar gravityFormPostRender = function gravityFormPostRender(e, formId) {\n  if (!submitting) {\n    return;\n  }\n\n  spinner.stop();\n  submitting = false;\n  scrollSubmit(document.getElementById(\"gform_wrapper_\".concat(formId)));\n};\n/**\n * @function gravityFormConfirmationLoaded\n * @description executes on AJAX-enabled forms when the confirmation page is loaded.\n */\n\n\nvar gravityFormConfirmationLoaded = function gravityFormConfirmationLoaded(e, formId) {\n  scrollSubmit(document.getElementById(\"gforms_confirmation_message_\".concat(formId)));\n};\n/**\n * @function spinOn\n * @description Kicks off spinner for form submit.\n */\n\n\nvar spinOn = function spinOn(e) {\n  spinner.spin(e.delegateTarget.parentNode);\n};\n/**\n * @function bindEvents\n * @description Bind the events for this module.\n */\n\n\nvar gravity_forms_bindEvents = function bindEvents() {\n  window.$(document).on('submit', '.gform_wrapper form', gravityFormSubmit).on('gform_post_render', gravityFormPostRender).on('gform_confirmation_loaded', gravityFormConfirmationLoaded);\n  delegate_default()(gravity_forms_el.container, '.gform_button', 'click', spinOn);\n};\n/**\n * @function init\n * @description Kick off this modules functions\n */\n\n\nvar gravityForms = function gravityForms() {\n  if (!gravity_forms_el.container) {\n    return;\n  }\n\n  spinner = new spin.Spinner({\n    lines: 11,\n    length: 6,\n    width: 2,\n    radius: 5,\n    color: '#333333',\n    speed: 1.2\n  });\n  gravity_forms_bindEvents();\n  console.info('SquareOne Theme: Initialized global form scripts.');\n};\n\n/* harmony default export */ var gravity_forms = (gravityForms);\n// CONCATENATED MODULE: ./integrations/gravity-forms/index.js\n/* -----------------------------------------------------------------------------\n *\n * Integration: Gravity Forms\n *\n * This file is just a clearing-house, see the css directory\n * and edit the source files found there.\n *\n * ----------------------------------------------------------------------------- */\n\n\nvar gravity_forms_init = function init() {\n  gravity_forms();\n};\n\n/* harmony default export */ var integrations_gravity_forms = (gravity_forms_init);\n// CONCATENATED MODULE: ./assets/js/src/theme/core/integrations.js\n/**\n * @module\n * @exports init\n * @description Initializes all integrations found in the components directory of the theme that you select here\n */\n\n\nvar integrations_init = function init() {\n  integrations_gravity_forms();\n  console.info('SquareOne Theme: Initialized all integrations.');\n};\n\n/* harmony default export */ var integrations = (integrations_init);\n// CONCATENATED MODULE: ./assets/js/src/theme/core/ready.js\n\n // import * as tests from 'utils/tests';\n\n // @EXAMPLE_REACT_APP\n// import * as tools from 'utils/tools';\n// import { HMR_DEV } from 'config/wp-settings';\n// you MUST do this in every module you use lodash in.\n// A custom bundle of only the lodash you use will be built by babel.\n\n\n\n\n\n // @EXAMPLE_REACT_APP\n// const el = {\n// \texampleAppRoot: tools.getNodes( 'example-app' )[ 0 ],\n// };\n\n/**\n * @function bindEvents\n * @description Bind global event listeners here,\n */\n\nvar ready_bindEvents = function bindEvents() {\n  on(window, 'resize', debounce_default()(core_resize, 200, false));\n};\n/**\n * @function init\n * @description The core dispatcher for init across the codebase.\n */\n\n\nvar ready_init = function init() {\n  // apply browser classes\n  apply_browser_classes(); // init external plugins\n\n  core_plugins(); // set initial states\n\n  viewport_dims(); // initialize global events\n\n  ready_bindEvents();\n  components();\n  integrations(); // @EXAMPLE_REACT_APP (Make sure to include the wrapping if block for ALL react apps\n  // #if INCLUDEREACT\n  // if ( el.exampleAppRoot && ! HMR_DEV ) {\n  // \timport( 'Example' /* webpackChunkName:\"example\" */ );\n  // }\n  // #endif\n  // if ( tests.supportsWorkers() ) {\n  // \timport( '../service-worker-init/index' /* webpackChunkName:\"service-worker-init\" */ ).then( ( module ) => {\n  // \t\tmodule.default();\n  // \t} );\n  // }\n\n  console.info('SquareOne Theme: Initialized all javascript that targeted document ready.');\n};\n/**\n * @function domReady\n * @description Export our dom ready enabled init.\n */\n\n\nvar domReady = function domReady() {\n  ready(ready_init);\n};\n\n/* harmony default export */ var core_ready = (domReady);\n// CONCATENATED MODULE: ./assets/js/src/theme/index.js\n\ncore_ready();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./assets/js/src/theme/index.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	!function() {
/******/ 		__webpack_require__.nmd = function(module) {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	!function() {
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// Promise = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"scripts": 0
/******/ 		};
/******/ 		
/******/ 		var deferredModules = [
/******/ 			["./assets/js/src/theme/index.js","vendor"]
/******/ 		];
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		var checkDeferredModules = function() {
/******/ 		
/******/ 		};
/******/ 		function checkDeferredModulesImpl() {
/******/ 			var result;
/******/ 			for(var i = 0; i < deferredModules.length; i++) {
/******/ 				var deferredModule = deferredModules[i];
/******/ 				var fulfilled = true;
/******/ 				for(var j = 1; j < deferredModule.length; j++) {
/******/ 					var depId = deferredModule[j];
/******/ 					if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferredModules.splice(i--, 1);
/******/ 					result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 				}
/******/ 			}
/******/ 			if(deferredModules.length === 0) {
/******/ 				__webpack_require__.x();
/******/ 				__webpack_require__.x = function() {
/******/ 		
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		}
/******/ 		__webpack_require__.x = function() {
/******/ 			// reset startup function so it can be called again when more startup code is added
/******/ 			__webpack_require__.x = function() {
/******/ 		
/******/ 			}
/******/ 			jsonpArray = jsonpArray.slice();
/******/ 			for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 			return (checkDeferredModules = checkDeferredModulesImpl)();
/******/ 		};
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		function webpackJsonpCallback(data) {
/******/ 			var chunkIds = data[0];
/******/ 			var moreModules = data[1];
/******/ 			var executeModules = data[2];
/******/ 			var runtime = data[3];
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0, resolves = [];
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					resolves.push(installedChunks[chunkId][0]);
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			for(moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			if(parentJsonpFunction) parentJsonpFunction(data);
/******/ 			while(resolves.length) {
/******/ 				resolves.shift()();
/******/ 			}
/******/ 		
/******/ 			// add entry modules from loaded chunk to deferred list
/******/ 			if(executeModules) deferredModules.push.apply(deferredModules, executeModules);
/******/ 		
/******/ 			// run deferred modules when all chunks ready
/******/ 			return checkDeferredModules();
/******/ 		};
/******/ 		
/******/ 		var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 		var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 		jsonpArray.push = webpackJsonpCallback;
/******/ 		var parentJsonpFunction = oldJsonpFunction;
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	// run startup
/******/ 	return __webpack_require__.x();
/******/ })()
;